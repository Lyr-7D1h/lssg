use std::{error::Error, fmt::Display, fs::File, path::PathBuf};

use crate::{
    domtree::{to_attributes, DomNode, DomNodeKind},
    lssg_error::LssgError,
    parser::{lexer::Token, Parser},
    sitetree::{SiteNode, SiteNodeKind, SiteTree},
    stylesheet::Stylesheet,
    util::filestem_from_path,
};

use super::{RenderQueue, RendererModule};

const WATERMARK: &'static str = r#"<footer id="watermark">Generated by <a href="https://github.com/lyr-7D1h/lssg">LSSG</a></footer>"#;

#[derive(Debug, Clone)]
pub struct Meta {
    pub name: String,
    pub content: String,
}

#[derive(Debug, Clone)]
pub struct DefaultModuleOptions {
    /// which you can you as your not found page.
    // FIXME: change me to a map of markdown to html files
    pub not_found_page: Option<PathBuf>,
    pub global_stylesheet: Option<PathBuf>,
    pub favicon: Option<PathBuf>,
    /// Overwrite the default stylesheet with your own
    pub overwrite_default_stylesheet: bool,
    /// Add extra resources
    pub stylesheets: Vec<PathBuf>,
    pub title: String,
    /// Translates to meta tags <https://www.w3schools.com/tags/tag_meta.asp>
    pub keywords: Vec<(String, String)>,
    /// Lang attribute ("en") <https://www.w3schools.com/tags/ref_language_codes.asp>
    pub language: String,
}

pub struct DefaultModule {
    options: DefaultModuleOptions,
    favicon: Option<usize>,
    stylesheet: usize,
}

impl DefaultModule {
    pub fn new(options: DefaultModuleOptions) -> Self {
        Self {
            options,
            favicon: None,
            stylesheet: 0,
        }
    }
}

impl RendererModule for DefaultModule {
    fn id(&self) -> &'static str {
        return "default";
    }

    fn site_init(&mut self, site_tree: &mut SiteTree) -> Result<(), LssgError> {
        let mut stylesheet = if let Some(p) = &self.options.global_stylesheet {
            let mut s = if self.options.overwrite_default_stylesheet {
                Stylesheet::new()
            } else {
                Stylesheet::default()
            };
            s.append(p)?;
            s
        } else {
            Stylesheet::default()
        };
        for path in self.options.stylesheets.iter() {
            stylesheet.append(&path)?;
        }
        self.stylesheet =
            site_tree.add_stylesheet("main.css".into(), stylesheet, site_tree.root())?;

        self.favicon = if let Some(input) = &self.options.favicon {
            Some(site_tree.add(
                SiteNode {
                    name: "favicon.ico".into(),
                    parent: Some(site_tree.root()),
                    children: vec![],
                    kind: SiteNodeKind::Resource {
                        input: input.clone(),
                    },
                },
                site_tree.root(),
            )?)
        } else {
            None
        };

        if let Some(input) = &self.options.not_found_page {
            let file = File::open(&input)?;
            let _ = site_tree.add(
                SiteNode {
                    name: filestem_from_path(input)?,
                    parent: Some(site_tree.root()),
                    children: vec![],
                    kind: SiteNodeKind::Page {
                        tokens: Parser::parse(file)?,
                        input: input.to_path_buf(),
                        keep_name: true,
                    },
                },
                site_tree.root(),
            );
        }

        Ok(())
    }

    fn init<'n>(
        &mut self,
        tree: &mut crate::domtree::DomTree,
        context: &super::RendererModuleContext<'n>,
    ) {
        let site_id = context.site_id;
        let site_tree = context.site_tree;

        // Add language to html tag
        let id = tree.get_elements_by_tag_name("html")[0];
        if let Some(node) = tree.get_mut(id) {
            if let DomNodeKind::Element { attributes, .. } = &mut node.kind {
                attributes.insert("lang".to_owned(), self.options.language.clone());
            }
        }

        // fill head
        let head = tree.get_elements_by_tag_name("head")[0];
        let title = tree.add(DomNode::element("title"), head);
        tree.add_text(self.options.title.clone(), title);
        if let Some(favicon) = self.favicon {
            tree.add_element_with_attributes(
                "link",
                to_attributes([
                    ("rel", "icon"),
                    ("type", "image/x-icon"),
                    ("href", &site_tree.rel_path(site_id, favicon)),
                ]),
                head,
            );
        }
        tree.add_element_with_attributes(
            "link",
            to_attributes([
                ("rel", "stylesheet"),
                ("href", &site_tree.rel_path(site_id, self.stylesheet)),
            ]),
            head,
        );
        tree.add_element_with_attributes(
            "meta",
            to_attributes([
                ("name", "viewport"),
                ("content", r#"width=device-width, initial-scale=1"#),
            ]),
            head,
        );
        tree.add(
            DomNode::element_with_attributes("meta", to_attributes([("charset", "utf-8")])),
            head,
        );
    }

    fn body<'n>(
        &mut self,
        tree: &mut crate::domtree::DomTree,
        context: &super::RendererModuleContext<'n>,
        render_queue: &mut RenderQueue,
        parent_id: usize,
        token: &crate::parser::lexer::Token,
    ) -> bool {
        // TODO make work
        // let content_id =
        //     tree.add_element_with_attributes("div", to_attributes([("id", "content")]), body);
        match token {
            Token::Heading {
                depth,
                text: _,
                tokens,
            } => {
                let parent = tree.add(DomNode::element(format!("h{depth}")), parent_id);
                render_queue.push_tokens_front(tokens, parent)
            }
            Token::Paragraph { tokens } => {
                let parent = tree.add(DomNode::element("p"), parent_id);
                render_queue.push_tokens_front(tokens, parent)
            }
            Token::Bold { text } => {
                let parent = tree.add(DomNode::element("b"), parent_id);
                tree.add_text(text, parent);
            }
            Token::Italic { text } => {
                let parent = tree.add_element("i", parent_id);
                tree.add_text(text, parent);
            }
            Token::Code { code, language: _ } => {
                let parent = tree.add_element("code", parent_id);
                tree.add_text(code, parent);
            }
            Token::Space { raw: _ } => {
                tree.add_text("", parent_id);
            }
            Token::Link { text, href } => {
                if href.starts_with("http") || href.starts_with("mailto:") {
                    let parent_id = tree.add_element_with_attributes(
                        "a",
                        to_attributes([("href", href)]),
                        parent_id,
                    );
                    tree.add_text(text, parent_id);
                    tree.add_element_with_attributes(
                        "i",
                        to_attributes([
                            ("class", "fas fas-external-link-alt"),
                            ("style", "font-size: 0.8em"),
                        ]),
                        parent_id,
                    );
                } else {
                    let parent_id = tree.add_element_with_attributes(
                        "a",
                        to_attributes([("href", href)]),
                        parent_id,
                    );
                    tree.add_text(text, parent_id);
                }
            }
            Token::Text { text } => {
                tree.add_text(text, parent_id);
            }
            Token::Html {
                tag,
                attributes,
                tokens,
            } => match tag.as_str() {
                "nav" if attributes.contains_key("links") => {
                    let mut attributes = attributes.clone();
                    attributes.insert("class".into(), "links".into());
                    let parent_id = tree.add_element_with_attributes("nav", attributes, parent_id);
                    for t in tokens {
                        match t {
                            Token::Link { text, href } => {
                                let parent_id = tree.add_element_with_attributes(
                                    "a",
                                    to_attributes([("href", href)]),
                                    parent_id,
                                );
                                let parent_id = tree.add_element_with_attributes(
                                    "div",
                                    to_attributes([("class", "card")]),
                                    parent_id,
                                );
                                tree.add_text(text, parent_id);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {
                    let parent =
                        tree.add_element_with_attributes(tag, attributes.clone(), parent_id);
                    render_queue.push_tokens_front(tokens, parent)
                }
            },
            Token::Comment { .. } => {}
            Token::EOF => {}
        };
        true
    }
}
