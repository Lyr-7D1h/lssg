use std::collections::{HashMap, HashSet};

use log::{error, warn};

use serde_extensions::Overwrite;

use crate::{
    html::{to_attributes, DomNode, DomNodeKind},
    lmarkdown::Token,
    lssg_error::LssgError,
    renderer::Renderer,
    sitetree::{Relation, SiteNodeKind, SiteTree},
    tree::DFS,
};

use crate::renderer::{RenderContext, TokenRenderer, RendererModule};

const WATERMARK: &'static str = r#"<footer id="watermark">Generated by <a href="https://github.com/lyr-7D1h/lssg">LSSG</a></footer>"#;

#[derive(Debug, Clone, Overwrite)]
struct PropegatedOptions {
    /// Add extra resources
    pub title: String,
    /// Translates to meta tags <https://www.w3schools.com/tags/tag_meta.asp>
    pub meta: HashMap<String, String>,
    /// Lang attribute ("en") <https://www.w3schools.com/tags/ref_language_codes.asp>
    pub language: String,
}
impl Default for PropegatedOptions {
    fn default() -> Self {
        Self {
            // favicon: None,
            // stylesheets: vec![],
            meta: HashMap::new(),
            title: String::new(),
            language: "en".into(),
        }
    }
}

#[derive(Debug, Clone, Overwrite)]
pub struct SinglePageOptions {
    pub disable_parent_resources: bool,
}
impl Default for SinglePageOptions {
    fn default() -> Self {
        Self {
            disable_parent_resources: false,
        }
    }
}

fn create_options_map(
    module: &DefaultModule,
    site_tree: &SiteTree,
) -> Result<HashMap<usize, PropegatedOptions>, LssgError> {
    let mut options_map: HashMap<usize, PropegatedOptions> = HashMap::new();
    for id in DFS::new(site_tree) {
        if let SiteNodeKind::Page { page, .. } = &site_tree[id].kind {
            if let Some(parent) = site_tree.page_parent(id) {
                if let Some(parent_options) = options_map.get(&parent) {
                    let parent_options = parent_options.clone();
                    let options: PropegatedOptions =
                        module.options_with_default(page, parent_options);
                    options_map.insert(id, options.clone());
                    continue;
                }
            }

            let options: PropegatedOptions = module.options(page);
            options_map.insert(id, options.clone());
        }
    }
    Ok(options_map)
}

/// Implements all basic default behavior, like rendering all tokens and adding meta tags and title to head
pub struct DefaultModule {
    /// Map of all site pages to options
    options_map: HashMap<usize, PropegatedOptions>,
}

impl DefaultModule {
    pub fn new() -> Self {
        Self {
            options_map: HashMap::new(),
        }
    }
}

impl RendererModule for DefaultModule {
    fn id(&self) -> &'static str {
        return "default";
    }

    /// Add all resources from ResourceOptions to SiteTree
    fn init(&mut self, site_tree: &mut SiteTree) -> Result<(), LssgError> {
        let mut relation_map = HashMap::new();

        let pages: Vec<usize> = DFS::new(site_tree)
            .filter(|id| site_tree[*id].kind.is_page())
            .collect();

        // propegate relations to stylesheets and favicon from parent to child
        for id in pages {
            // skip page if disabled
            if let SiteNodeKind::Page { page, .. } = &site_tree[id].kind {
                let opts: SinglePageOptions = self.options(page);
                if opts.disable_parent_resources {
                    continue;
                }
            }
            // get the set of links to favicon and stylesheets
            let mut set: HashSet<usize> = site_tree
                .links_from(id)
                .into_iter()
                .filter_map(|link| match link.relation {
                    Relation::External | Relation::Discovered { .. } => {
                        match &site_tree[link.to].kind {
                            SiteNodeKind::Stylesheet { .. } => Some(link.to),
                            SiteNodeKind::Resource { input } => match input.filename() {
                                Ok(filename) => {
                                    if filename == "favicon.ico" {
                                        Some(link.to)
                                    } else {
                                        None
                                    }
                                }
                                Err(e) => {
                                    error!("Invalid filename {e}");
                                    None
                                }
                            },
                            _ => None,
                        }
                    }
                    _ => None,
                })
                .collect();

            // update set with parent and add any links from parent
            if let Some(parent) = site_tree.page_parent(id) {
                if let Some(parent_set) = relation_map.get(&parent) {
                    // add links from parent_set without the ones it already has
                    for to in (parent_set - &set).iter() {
                        site_tree.add_link(id, *to);
                    }
                    set = set.union(parent_set).cloned().collect();
                }
            }
            relation_map.insert(id, set);
        }

        Ok(())
    }

    fn after_init(&mut self, site_tree: &SiteTree) -> Result<(), LssgError> {
        // save options map after site tree has been created to get all pages
        self.options_map = create_options_map(&self, site_tree)?;
        Ok(())
    }

    fn render_page<'n>(
        &mut self,
        dom_tree: &mut crate::html::DomTree,
        context: &super::RenderContext<'n>,
    ) {
        let site_id = context.site_id();
        let site_tree = context.site_tree();

        let options = self
            .options_map
            .get(&site_id)
            .expect("expected options map to contain all page ids");

        // Add language to html tag
        let id = dom_tree.get_elements_by_tag_name("html")[0];
        let node = dom_tree.get_mut(id);
        if let DomNodeKind::Element { attributes, .. } = &mut node.kind {
            attributes.insert("lang".to_owned(), options.language.clone());
        }

        // fill head
        let head = dom_tree.get_elements_by_tag_name("head")[0];

        let title = dom_tree.add_element(head, "title");
        dom_tree.add_text(title, options.title.clone());

        for link in site_tree.links_from(site_id) {
            match link.relation {
                Relation::External | Relation::Discovered { .. } => match site_tree[link.to].kind {
                    SiteNodeKind::Resource { .. } if site_tree[link.to].name == "favicon.ico" => {
                        dom_tree.add_element_with_attributes(
                            head,
                            "link",
                            to_attributes([
                                ("rel", "icon"),
                                ("type", "image/x-icon"),
                                ("href", &site_tree.rel_path(site_id, link.to)),
                            ]),
                        );
                    }
                    SiteNodeKind::Stylesheet { .. } => {
                        dom_tree.add_element_with_attributes(
                            head,
                            "link",
                            to_attributes([
                                ("rel", "stylesheet"),
                                ("href", &site_tree.rel_path(site_id, link.to)),
                            ]),
                        );
                    }
                    _ => {}
                },
                _ => {}
            }
        }
        dom_tree.add_element_with_attributes(
            head,
            "meta",
            to_attributes([
                ("name", "viewport"),
                ("content", r#"width=device-width, initial-scale=1"#),
            ]),
        );
        dom_tree.add_element_with_attributes(head, "meta", to_attributes([("charset", "utf-8")]));
        for (key, value) in &options.meta {
            dom_tree.add_element_with_attributes(
                head,
                "meta",
                to_attributes([("name", key), ("content", value)]),
            );
        }
    }

    fn render_body<'n>(
        &mut self,
        // tree: &mut crate::html::DomTree,
        // context: &super::RendererModuleContext<'n>,
        q: &mut TokenRenderer,
        parent_id: usize,
        token: &crate::lmarkdown::Token,
    ) -> bool {
        // println!("{token:?}");
        match token {
            Token::Break { raw: _ } => {
                q.add_element(parent_id, "br");
            }
            Token::Heading { depth, tokens } => {
                let parent_id = q.add_element(parent_id, format!("h{depth}"));
                q.render(parent_id, tokens);
            }
            Token::Paragraph { tokens } => {
                let parent_id = q.add_element(parent_id, "p");
                q.render(parent_id, tokens);
            }
            Token::Bold { text } => {
                let parent_id = q.add_element(parent_id, "b");
                q.add_text(parent_id, text);
            }
            Token::Italic { text } => {
                let parent_id = q.add_element(parent_id, "i");
                q.add_text(parent_id, text);
            }
            Token::Code { code, language: _ } => {
                let parent_id = q.add_element(parent_id, "code");
                q.add_text(parent_id, code);
            }
            Token::Link { text, href } => {
                if text.len() == 0 {
                    return true;
                }
                // external link
                if href.starts_with("http") || href.starts_with("mailto:") {
                    let a = q.add_element_with_attributes(
                        parent_id,
                        "a",
                        to_attributes([("href", href)]),
                    );

                    q.render(a, text);

                    // TODO use html! macro
                    q.add_text(parent_id,r##"<svg width="1em" height="1em" viewBox="0 0 24 24" style="cursor:pointer"><g stroke-width="2.1" stroke="#666" fill="none" stroke-linecap="round" stroke-linejoin="round"><polyline points="17 13.5 17 19.5 5 19.5 5 7.5 11 7.5"></polyline><path d="M14,4.5 L20,4.5 L20,10.5 M20,4.5 L11,13.5"></path></g></svg>"##, );
                    return true;
                }
                if href.ends_with(".md") {
                    let to_id = q
                        .site_tree()
                        .links_from(q.site_id())
                        .into_iter()
                        .find_map(|l| {
                            if let Relation::Discovered { raw_path: path } = &l.relation {
                                if path == href {
                                    return Some(l.to);
                                }
                            }
                            None
                        });
                    if let Some(to_id) = to_id {
                        let rel_path = q.site_tree().path(to_id);
                        let parent_id = q.add_element_with_attributes(
                            parent_id,
                            "a",
                            to_attributes([("href", rel_path)]),
                        );
                        q.render(parent_id, text);
                        return true;
                    }
                    warn!("Could not find node where {href:?} points to");
                }
                let parent_id =
                    q.add_element_with_attributes(parent_id, "a", to_attributes([("href", href)]));
                q.render(parent_id, text);
            }
            Token::Text { text } => {
                q.add_text(parent_id, text);
            }
            Token::Html {
                tag,
                attributes,
                tokens,
            } => match tag.as_str() {
                "nav" if attributes.contains_key("links") => {
                    let mut attributes = attributes.clone();
                    attributes.insert("class".into(), "links".into());
                    let parent_id = q.add_element_with_attributes(parent_id, "nav", attributes);
                    for t in tokens {
                        match t {
                            Token::Link { text, href } => {
                                let parent_id = q.add_element_with_attributes(
                                    parent_id,
                                    "a",
                                    to_attributes([("href", href)]),
                                );
                                let parent_id = q.add_element_with_attributes(
                                    parent_id,
                                    "div",
                                    to_attributes([("class", "card")]),
                                );
                                q.render(parent_id, tokens);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {
                    let parent_id =
                        q.add_element_with_attributes(parent_id, tag, attributes.clone());
                    q.render(parent_id, tokens);
                }
            },
            Token::Attributes { .. } | Token::Comment { .. } => {}
            Token::EOF => {}
        };
        true
    }
}
