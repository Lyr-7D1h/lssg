#!/bin/bash
# filepath: /home/lyr/p/lssg/optimize_media.sh

# Web Media Optimization Script
# Converts videos to WebM/MP4 and images to WebP with fallbacks

set -e

# Configuration
QUALITY_VIDEO=25  # CRF value for video (lower = better quality)
QUALITY_IMAGE=80  # Quality for image compression (0-100)
MAX_WIDTH=1920    # Maximum width for videos/images
OUTPUT_DIR="optimized"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check dependencies
check_dependencies() {
    local deps=("ffmpeg" "convert" "cwebp")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${RED}Missing dependencies: ${missing[*]}${NC}"
        echo "Install with: sudo apt update && sudo apt install ffmpeg imagemagick webp"
        exit 1
    fi
}

# Create output directory
setup_output() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        echo -e "${GREEN}Created output directory: $OUTPUT_DIR${NC}"
    fi
}

# Convert video files
convert_video() {
    local input="$1"
    local filename=$(basename "$input")
    local name="${filename%.*}"
    local output_webm="$OUTPUT_DIR/${name}.webm"
    local output_mp4="$OUTPUT_DIR/${name}.mp4"
    
    echo -e "${YELLOW}Converting video: $input${NC}"
    
    # WebM version (smaller file size)
    ffmpeg -i "$input" \
        -c:v libvpx-vp9 -crf "$QUALITY_VIDEO" -b:v 0 \
        -c:a libopus -b:a 128k \
        -vf "scale='min($MAX_WIDTH,iw)':'min($MAX_WIDTH*ih/iw,ih)'" \
        -pass 1 -an -f null /dev/null -y 2>/dev/null
    
    ffmpeg -i "$input" \
        -c:v libvpx-vp9 -crf "$QUALITY_VIDEO" -b:v 0 \
        -c:a libopus -b:a 128k \
        -vf "scale='min($MAX_WIDTH,iw)':'min($MAX_WIDTH*ih/iw,ih)'" \
        -pass 2 "$output_webm" -y 2>/dev/null
    
    # MP4 version (better compatibility)
    ffmpeg -i "$input" \
        -c:v libx264 -crf "$QUALITY_VIDEO" \
        -c:a aac -b:a 128k \
        -vf "scale='min($MAX_WIDTH,iw)':'min($MAX_WIDTH*ih/iw,ih)'" \
        "$output_mp4" -y 2>/dev/null
    
    # Clean up VP9 pass files
    rm -f ffmpeg2pass-*.log
    
    echo -e "${GREEN}✓ Video converted: $output_webm, $output_mp4${NC}"
}

# Convert image files
convert_image() {
    local input="$1"
    local filename=$(basename "$input")
    local name="${filename%.*}"
    local ext="${filename##*.}"
    local output_webp="$OUTPUT_DIR/${name}.webp"
    local output_fallback="$OUTPUT_DIR/${name}.jpg"
    
    echo -e "${YELLOW}Converting image: $input${NC}"
    
    # WebP version (modern format, smaller size)
    cwebp -q "$QUALITY_IMAGE" -resize "$MAX_WIDTH" 0 "$input" -o "$output_webp" 2>/dev/null
    
    # JPEG fallback (better compatibility)
    convert "$input" \
        -resize "${MAX_WIDTH}x${MAX_WIDTH}>" \
        -quality "$QUALITY_IMAGE" \
        -strip \
        "$output_fallback" 2>/dev/null
    
    echo -e "${GREEN}✓ Image converted: $output_webp, $output_fallback${NC}"
}

# Generate HTML with optimized media tags
generate_html() {
    local html_file="$OUTPUT_DIR/index.html"
    
    echo "<!DOCTYPE html>" > "$html_file"
    echo "<html><head><title>Optimized Media</title></head><body>" >> "$html_file"
    echo "<h1>Optimized Media Files</h1>" >> "$html_file"
    
    # Add videos
    for webm in "$OUTPUT_DIR"/*.webm; do
        if [ -f "$webm" ]; then
            local name=$(basename "$webm" .webm)
            local mp4="$OUTPUT_DIR/${name}.mp4"
            echo "<video controls width='100%' style='max-width:800px'>" >> "$html_file"
            echo "  <source src='${name}.webm' type='video/webm'>" >> "$html_file"
            echo "  <source src='${name}.mp4' type='video/mp4'>" >> "$html_file"
            echo "  Your browser does not support the video tag." >> "$html_file"
            echo "</video><br><br>" >> "$html_file"
        fi
    done
    
    # Add images
    for webp in "$OUTPUT_DIR"/*.webp; do
        if [ -f "$webp" ]; then
            local name=$(basename "$webp" .webp)
            local jpg="$OUTPUT_DIR/${name}.jpg"
            echo "<picture>" >> "$html_file"
            echo "  <source srcset='${name}.webp' type='image/webp'>" >> "$html_file"
            echo "  <img src='${name}.jpg' alt='$name' style='max-width:100%; height:auto;'>" >> "$html_file"
            echo "</picture><br><br>" >> "$html_file"
        fi
    done
    
    echo "</body></html>" >> "$html_file"
    echo -e "${GREEN}✓ Generated HTML preview: $html_file${NC}"
}

# Main processing function
process_files() {
    local processed=0
    
    # Video formats
    for ext in mp4 avi mov mkv webm flv; do
        for file in *."$ext" *."${ext^^}"; do
            if [ -f "$file" ]; then
                convert_video "$file"
                ((processed++))
            fi
        done
    done
    
    # Image formats
    for ext in jpg jpeg png gif bmp tiff webp; do
        for file in *."$ext" *."${ext^^}"; do
            if [ -f "$file" ]; then
                convert_image "$file"
                ((processed++))
            fi
        done
    done
    
    if [ $processed -eq 0 ]; then
        echo -e "${YELLOW}No media files found in current directory${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Processed $processed files${NC}"
}

# Show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  -q, --quality VIDEO_CRF IMAGE_QUALITY  Set quality (default: 25 80)"
    echo "  -w, --width MAX_WIDTH                   Set max width (default: 1920)"
    echo "  -o, --output OUTPUT_DIR                 Set output directory (default: optimized)"
    echo "  -h, --help                              Show this help"
    echo ""
    echo "Examples:"
    echo "  $0                           # Process all media in current directory"
    echo "  $0 -q 23 85 -w 1080         # Higher quality, smaller max width"
    echo "  $0 -o web_assets             # Different output directory"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -q|--quality)
            QUALITY_VIDEO="$2"
            QUALITY_IMAGE="$3"
            shift 3
            ;;
        -w|--width)
            MAX_WIDTH="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_usage
            exit 1
            ;;
    esac
done

# Main execution
main() {
    echo -e "${GREEN}Web Media Optimization Script${NC}"
    echo "Settings: Video CRF=$QUALITY_VIDEO, Image Quality=$QUALITY_IMAGE, Max Width=$MAX_WIDTH"
    echo ""
    
    check_dependencies
    setup_output
    process_files
    generate_html
    
    echo ""
    echo -e "${GREEN}✓ All done! Optimized files are in: $OUTPUT_DIR${NC}"
    echo -e "${GREEN}✓ Open $OUTPUT_DIR/index.html to preview results${NC}"
}

# Run main function
main "$@"